package org.example.sbs.routinesjar.utilities;

import java.util.ArrayList;
import java.util.Arrays;

import com.jayway.jsonpath.JsonPath;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class SFPWCreditLimitInformation {

	public String id;
	public String ownerId;
	public String dealingCompanyReference;
	public String limitType;
	public String reference;
	public String name;
	public String calculationType;
	public String currency;
	public double limit;
	public String status;
	public ArrayList<String> assetTypes;
	public ArrayList<SFPWFacility> facilities;
	public String startDate; //LocalDate
	public String endDate;
	public ArrayList<SFPWUserDefinedFields> userDefinedFields;
	public ArrayList<SFPWSuppliers> suppliers;
	public Boolean allSupplierLoans;
	public Boolean applyPipeline;
	public Boolean applyUtilisation;
	public Boolean applyClearing;
	public Boolean applyRisk;
	public Boolean applyArrears;
	public Boolean validForNonSupplierLoans;
	public double tolerance;
	public String toleranceType;
	public String toleranceBehaviour;
	public ArrayList<String> tags;
	
	public SFPWCreditLimitInformation(Object credit, String dealingCompanyReference) {
		this.id = JsonPath.parse(credit).read("$['DEP_Package__SFP_W_Id__c']");
		String dealerSiteLine = JsonPath.parse(credit).read("$['DEP_Package__Dealer_Site_Line__r']");
		this.ownerId = (dealerSiteLine != null) ? JsonPath.parse(credit).read("$['DEP_Package__Dealer_Site_Line__r']['DEP_Package__SFP_W_Id__c']") : JsonPath.parse(credit).read("$['DEP_Package__Dealer_Site_Limit__r']['DEP_Package__SFP_W_Id__c']");
		this.dealingCompanyReference = dealingCompanyReference;
		this.limitType = ((Boolean)JsonPath.parse(credit).read("$['DEP_Package__Is_Line__c']")) ? "CREDIT_LINE" : "CREDIT_LIMIT";
		this.reference = JsonPath.parse(credit).read("$['DEP_Package__Reference__c']");
		this.name = JsonPath.parse(credit).read("$['Name']");
		this.calculationType = JsonPath.parse(credit).read("$['DEP_Package__Calculation_Type__c']");
		this.currency = JsonPath.parse(credit).read("$['DEP_Package__Currency_Code__c']");
		this.limit = JsonPath.parse(credit).read("$['DEP_Package__Total_Credit_Limit_Amount__c']");
		this.status = JsonPath.parse(credit).read("$['DEP_Package__Credit_Status__c']");
		String assetCredFac = JsonPath.parse(credit).read("$['DEP_Package__Assets_Credit_Facility__c']");
		this.assetTypes = (assetCredFac != null) ? new ArrayList<String>(Arrays.asList(assetCredFac.split(";"))) : null;
		//this.facilities = JsonPath.parse(credit).read("$['Name']");
		this.startDate = JsonPath.parse(credit).read("$['Name']");
		this.endDate = JsonPath.parse(credit).read("$['Name']");
		this.userDefinedFields = JsonPath.parse(credit).read("$['Name']");
		this.suppliers = JsonPath.parse(credit).read("$['Name']");
		this.allSupplierLoans = JsonPath.parse(credit).read("$['Name']");
		this.applyPipeline = JsonPath.parse(credit).read("$['Name']");
		this.applyUtilisation = JsonPath.parse(credit).read("$['Name']");
		this.applyClearing = JsonPath.parse(credit).read("$['Name']");
		this.applyRisk = JsonPath.parse(credit).read("$['Name']");
		this.applyArrears = JsonPath.parse(credit).read("$['Name']");
		this.validForNonSupplierLoans = JsonPath.parse(credit).read("$['Name']");
		this.tolerance = JsonPath.parse(credit).read("$['Name']");
		this.toleranceType = JsonPath.parse(credit).read("$['Name']");
		this.toleranceBehaviour = JsonPath.parse(credit).read("$['Name']");
		this.tags = JsonPath.parse(credit).read("$['Name']");
	}
}
