package org.example.sbs.routinesjar.utilities;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */

import java.util.HashMap;
import java.util.ArrayList;
public class Utilities {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     *
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }*/
    public ArrayList<Object> appendReferenceIdsRecursive(ArrayList<String> refIds, HashMap<String, ArrayList<String>> refIdByParentOrgId, HashMap<String, ArrayList<Object>> dealersByParentOrgId){
    	if(refIds == null || refIds.size() == 0) return null;
    	ArrayList<Object> outputRecords = new ArrayList<Object>();
    	ArrayList<String> othersRefIds = new ArrayList<String>();
    	//System.out.println("refIds.size(): "+refIds.size());
    	for(int i = 0; i<refIds.size() ; i++){
    		//System.out.println("refIdByParentOrgId.containsKey(refIds.get(i)): "+refIdByParentOrgId.containsKey(refIds.get(i)));
    		if(refIdByParentOrgId.containsKey(refIds.get(i))){
    			othersRefIds.addAll(refIdByParentOrgId.get(refIds.get(i)));
    			outputRecords.addAll(dealersByParentOrgId.get(refIds.get(i)));
    		}
    	}
    	ArrayList<Object> dealersToAdd = appendReferenceIdsRecursive(othersRefIds, refIdByParentOrgId, dealersByParentOrgId);
    	//System.out.println("dealersToAdd: "+dealersToAdd);
    	if(dealersToAdd != null){
    		outputRecords.addAll(dealersToAdd);
    		//System.out.println("outputRecords: "+outputRecords);
    	}
    	return outputRecords;
    }
}
